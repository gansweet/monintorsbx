#!/bin/bash
set -e

# --- 1. 定义 cfmonitor.sh 的配置路径和文件 ---
# 注意：cfmonitor.sh 默认路径是 $HOME/.cf-vps-monitor，但在 Docker 里我们使用 /app/config
CF_DIR="/app/.cf-vps-monitor"
CF_CONFIG_FILE="$CF_DIR/config/config"
CF_SERVICE_FILE="$CF_DIR/bin/vps-monitor-service.sh"

# --- 2. 检查并创建 cfmonitor 配置 (通过环境变量) ---

if [[ -n "$CF_WORKER_URL" || -n "$CF_SERVER_ID" ]]; then
    echo "--- ⚙️ 发现配置环境变量，开始自动生成 cfmonitor 配置 ---"
    
    # 确保配置目录存在
    mkdir -p "$CF_DIR/config" "$CF_DIR/logs" "$CF_DIR/run" "$CF_DIR/bin"
    
    # 将环境变量写入脚本期望的配置文件格式
    # 注意: cfmonitor.sh 脚本的逻辑需要修改或绕过其内部的安装逻辑
    # 鉴于原始脚本结构，最直接的方式是生成一个配置文件或直接使用环境变量
    
    # 写入配置文件 (假设 cfmonitor.sh 依赖 ini 或类似格式，或我们直接用变量)
    # cfmonitor.sh 的配置逻辑在脚本内部，这里我们先生成一个 shell 配置文件供其调用
    
    echo "# Generated by Docker Entrypoint" > "$CF_CONFIG_FILE"
    echo "CF_WORKER_URL=\"$CF_WORKER_URL\"" >> "$CF_CONFIG_FILE"
    echo "CF_SERVER_ID=\"$CF_SERVER_ID\"" >> "$CF_CONFIG_FILE"
    
    if [ -n "$CF_INTERVAL" ]; then
        echo "CF_INTERVAL=$CF_INTERVAL" >> "$CF_CONFIG_FILE"
    fi
    if [ -n "$CF_API_KEY" ]; then
        echo "CF_API_KEY=\"$CF_API_KEY\"" >> "$CF_CONFIG_FILE"
    fi
    
    # 提示用户在运行 cfmonitor 之前，可能仍需要 'install' 命令来设置服务文件
    echo "✅ cfmonitor 配置文件已写入: $CF_CONFIG_FILE"
    
    # 警告：cfmonitor.sh 内部有硬编码路径。
    # 理想情况下，我们应该修改 cfmonitor.sh 脚本，让它使用环境变量或特定的配置路径。
    # 在这个 Docker 容器中，我们暂时假设它能够读取或我们强制使用它。
    
    # ⚠️ 启动 cfmonitor 服务：如果提供了 URL，并且用户没有指定其他命令，则运行安装和启动。
    if [ "$#" -eq 0 ] && [ -n "$CF_WORKER_URL" ]; then
        echo "--- 🚀 自动执行 cfmonitor install 和 start ---"
        /usr/local/bin/cfmonitor.sh install
        exec /usr/local/bin/cfmonitor.sh start
    fi
fi

# --- 3. 命令行参数处理 (核心逻辑不变) ---

# 如果没有参数传入，显示帮助/菜单
if [ "$#" -eq 0 ]; then
    echo "--- 📦 Dockerized Multi-Tool ---"
    echo "Usage: docker run [IMAGE] [COMMAND] [ARGS...]"
    echo ""
    echo "Configuration (via -e):"
    echo "  CF_WORKER_URL (Required for cfmonitor auto-start)"
    echo "  CF_SERVER_ID"
    echo "  CF_INTERVAL"
    echo "  CF_API_KEY"
    echo ""
    echo "Commands:"
    echo "  cfmonitor [install|start|status|...]"
    echo "  cloudsbx [rep|install|...]"
    echo ""
    exit 0
fi

# 根据第一个参数决定执行哪个脚本
case "$1" in
    cfmonitor)
        shift
        # 运行 cfmonitor 脚本
        exec /usr/local/bin/cfmonitor.sh "$@"
        ;;
    cloudsbx)
        shift
        # 运行 cloudsbx 脚本
        exec /usr/local/bin/cloudsbx.sh "$@"
        ;;
    install|uninstall|start|stop|restart|status|logs|config|test|menu)
        # 默认执行 cfmonitor.sh 的服务管理命令
        exec /usr/local/bin/cfmonitor.sh "$@"
        ;;
    *)
        echo "Unknown command or script: $1" >&2
        exit 1
        ;;
esac
