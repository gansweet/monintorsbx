name: Docker Image CI/CD (GHCR.io)

# 1. 设置工作流触发条件
on:
  # 允许手动从 GitHub Actions 界面触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (e.g., latest, v1.0.0)'
        required: true
        default: 'latest'
  # 在推送到 main 分支时自动触发
  push:
    branches: [ "main" ]

# 授予工作流写入权限，用于推送镜像到 GHCR.io
permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检查代码 (Checkout)
        uses: actions/checkout@v4

      # 2. 登录 GHCR.io (使用 GITHUB_TOKEN)
      - name: 登录 GitHub Container Registry (GHCR.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 使用当前触发者的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用内置的 GITHUB_TOKEN

      # 3. 设置镜像标签和名称
      - name: 设置 GHCR.io 镜像名称和标签
        id: meta
        run: |
          # 格式: ghcr.io/<owner>/<repo>
          IMAGE_NAME="ghcr.io/${{ github.repository }}"
          # 优先使用手动输入的 tag，否则使用 latest
          TAG=${{ github.event.inputs.tag || 'latest' }}
          
          # 构建完整的 tags 列表
          echo "TAGS=$IMAGE_NAME:$TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      # 4. 构建和推送 Docker 镜像
      - name: 构建并推送到 GHCR.io
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 使用步骤 3 中生成的完整标签
          tags: ${{ steps.meta.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 镜像推送成功提示
        run: echo "Docker 镜像已推送到：${{ steps.meta.outputs.TAGS }}"
